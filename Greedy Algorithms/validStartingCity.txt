# -*- coding: utf-8 -*-
"""
Created on Sat May 29 17:30 2021

@author: daniel
"""

Valid Starting City
-------------------

-Imagine you have a set of cities that are laid out in a circle, connected by a circular road
that runs clockwise.
-Each city has a gas station that provides gallons of fuel, and each city is some distance away
from the next.

-You have a car that can drive some number of miles per gallon of fuel, and your goal is to pick
a starting city s.t. you can fill up your car w/ that city's fuel, drive to the next city, refill
up your car w/ that city's fuel, drive to the next city, and so on and so forth until you return
back to the starting city w/ 0 or more gallons of fuel left.

-For the actual problem, you'll be given an array of distances s.t. city i is distances[i] away
from city i+1.
-Since the cities are connected via a circular road, the last city is connect to the first city.
-In other words, the last distance in the distance array is equal to the distance from the last
city to the first city.
-You'll be given an array of fuel available at each city, where fuel[i] is equal to the fuel 
availalbe at each city, where fuel[i] is equal to the fuel available at city i. The total amount of
fuel available (from all cities combined) is exactly enough to travel to all cities. You fuel tank
always starts out empty, and you're given a positive integer value for the number of miles that your
car can travel per gallon of fuel (miles per gallon, MPG). You can assume that you will always be 
given at least two cities.
-Write a function that returns the index of the valid starting city.

Sample Input
------------
distances = [5, 25, 15, 10, 15]
fuel = [1, 2, 1, 0, 3]
mpg = 0

For this problem we need to imagine that we have a set of cities that are laid out on a circular
road.

See validStartingCity1.jpg

-You always start w/ zero gallons of gas
-There will always ever be 1 answer to this problem.
-City 4 is a valid city because we're able to go all the way around w/out running out of gas.

-2 ways to solve this problem.
-1st method is the most straightforward approach.
-Just start at city 0 and try out all the cities in a brute-force fashion.
L>This runs in O(n^2) time
L>For all the cities, look at all the cities.

Better Way
----------
-This is a greedy algorithm. We're try to pick the city taht we enter w/ the minimum number
of gas.
L>That is the answer to this problem.
-We make a greedy choice in the city we eneter w/ the minimum amount of gas. 

See validStartingCity2.jpg



