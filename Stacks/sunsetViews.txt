# -*- coding: utf-8 -*-
"""
Created on Sat May 29 16:43:24 2021

@author: daniel
"""


Sunset Views
-------------
-Given an array of buildings and a direction that all of the buildings face, return an array of the dices
of the buildings that can see the sunset. 
-A building can see the sunset if it's strictly taller than all of the buildings that come after if in the
direction that it faces.
-The input array named buildings contains positive, non-zero integers representing the heights of the buildings.
-A building at index i thus has a height denoted by buildings[i]
-All of the buildings face the same direction, and this direction is either easst or west, denoted by the input 
string named direction which will always be equal to either "EAST" or "WEST".
-In relation to the input array, you can interpret these directions as right for east and left for west.
-Important note: the indices in the output array should be sorted in ascending order.

Sample Input
buildings = [3, 5, 4, 4, 3, 1, 3, 2]
direction = "EAST"

Sample Output #1
[1, 3, 6, 7]
//Below is a visual representation of the sample input

     _
    | |__ __       __
  __| |  |  |__   |  |__
 |  | |  |  |  |  |  |  |
 |  | |  |  |  |__|  |  |
 |  | |  |  |  |  |  |  |
---------------------------
  0  1  2  3  4  5  6  7

Sample Input # 2
buildings = [3, 5, 4, 4, 3, 1, 3, 2]
direction = "WEST"

Sample Output #2
[0, 1]
The buildings are the same as in the first sample
input, but their direction is reversed.

Sub-Optimal/Naive Solution
---------------------------
-If direction is East, we start at the first element.
-Then we traverse the entire array to see if there are 
any buildings in front of it whose height is greater than
or equal to the current building.
L>If such a building(s) exists then we say that building
cannot see the sun-set.
-Else it can see the sunset.

Time: O(n^2)

More Optimal O(n) Solution
---------------------------

-We start iterating in the opposite direction, i.e. we
start at the end of the array if direction is "EAST".
-If it is "WEST" we start at the first element
L>However, we may need to modify the output array s.t.
it's sorted
-We have a variable called maxHeight
L>If we are at an element that is greater than the maxHeight
variable, we know that we can see the sunset.
-If we keep a running maximum of the heights of the buildings that 
we've seen so far, then we know we're going in the opposite direction,
if any building we get to can see the sunset or not.
-We also need to sort the output array in acsending order when we're
done since we started in reverse order
Time: O(n)
Space: O(n)

More Optimal Solution W/ a Stack
---------------------------------

Stack: LIFO (last in first out), FILO (first in last out).
-In our problem, we still use the stack to hold all the buildings
that can see the sunset.
-We may have to reverse the stack based on the way that we looped.
-In this solution, if direction is EAST, we start EAST, unlike the last
solution where we start in reverse.
-If we start from the EAST direction, items will be in the correct order.
-So we start in the direction of our input and we compare the height of our
current building with the height of the building on top of our stack.
-If none exist, we add the index of the current building.
L>We can access the height of a building from its index.
-If a building has a greater height than a building on the stack, we remove
that building from our stack, and add the building w/ the greater height
to the stack, after comparing its value to the value of the rest of the stack.
-We keep track of the buildings that can currently see the sunset.
-Once we reach a height greater than a building in our stack, those buildings
can no longer see the sunset and we remove them from our stack.

Time: O(n)
Space: O(n) -> we only pop n elements off the stack because we will
				have at most n elements from our stack