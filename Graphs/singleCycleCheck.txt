# -*- coding: utf-8 -*-
"""
Created on Sat May 29 17:30 2021

@author: daniel
"""

Single Cycle Check
------------------

You're given an array of integers where each integer represents a jump of its value
in the array. For instance, the integer 2 represents a jump of two indices forward in 
the array. 
-The integer -3 represents a jump of three indices backward in the array.
-If a jump spills past the array's bounds, it wraps over to the other side.
-For instance, a jump of -1 at index 0 brings us to the last index in the array.
-Similarly, a jump of 1 at the last index in the array brings us to index 0.

-Write a function that returns a boolean representing whether the jumps in the array
form a single cycle.
*A single cycle occurs if, starting at any index in the array and following the jumps,
every element in the array is visited exactly once before landing back on the starting
index.
Sample
[2,3,1,-4,-4,2] -> True

How do we find whether or not an array of integers has a single cycle?
-Note the fact that we need to have visited every element in the array
exactly once as we loop through them
-We can keep track of how many times we've visited every number in an auxiliary array
-We can have a list of the same size ex:

[2, 3, 1, -4, -4, 2]
[0, 0, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0]

-We start at the begining and we mark all ofthem by incrimenting the # of times
we visited every number by 1

-If at any point, we get to a number, and we increment by another one, we know that
we visited that number (too many times).
-Or at least, if we ever get to a point where we get a two, and there are zeros elsewhere.
-We take the length of the array and we say we're going to visit the number of elements
equal to this length.
-That's one solution but there's another solution that doesn't need an auxiliary array.

Non-Extra-Array Solution
------------------------
-Forget about keeping track of all numbers
[2, 3, 1, -4, -4, 2] n=6
-We want to visit these n elements.
-If at any point we visit these elements more than once, then we know there's a cycle.
-Let's assume we start at the first element, 2.
-If at any point we rearrive at the 2, when we're jumping through these 6 elements, then
we know we've go a cycle

ex2:

[2, 3, 1, -3, -4, 2]

Here if we start off at 2, we go to 1, and we go to -3, and then we go back to 2 w/out
visiting all 6 elements
=> There is more than 1 cycle

-Once we've jumped through all 6 (n) elements, we need to end back at the 2 (initial pointer)

ex3:

[2, 3, 1, -4, 1, 2]

-Here there is going to be an extra cycle(s) => False

Time: O(n)
Space: O(1)

We need to take care of negative integers in the array, like -26

return next 
