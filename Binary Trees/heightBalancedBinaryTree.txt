# -*- coding: utf-8 -*-
"""
Created on Sat May 29 17:30 2021

@author: daniel
"""

Height Balanced Binary Tree
---------------------------
-Given the root node of a binary tree, write a function that returns true if this 
Binary Tree is height balanced and false if it isn't
-A Binary Tree is height balanced if for each node in the tree, the difference between 
the height of its left subtree and the height of its right subtree is at most 1.

See heightBalancedBinaryTree1.jpg

Height of right subtree -> 2
Why? -> because we traverse 2 edges before reaching a node w/ no children.

Height of left subtree -> 3
Why? -> because we traverse 3 edges 
-The difference between these 2 heights is 1, therefore, this root node is height
balanced.
-We keep going to left and right nodes and repeat this process.

Start at a root node. Go to the left subtree to find it's height. 
It goes to node 2. It does the same.

-If a node has no children, then we know it is height balanced because the height
of its left subtree and the height of its right subtree are zero => 0 - 0 = 0.

-We take the maximum between the height of the left subtree and the right subtree,
if they're both the same height, one can return true.
-Also we're going to return the height of this node which is equal to 1.
-We had 0 as the max sub height for node 4 so we took 0 and returned 0 + 1
as the current sub-height (this is because from 4->2 we traverse 1 edge).

-Then we go to the right of 2, 5, as we are exploring this sub-branch.
-From 5 we ask the same question.
L>Are you left and right subtrees balanced, and if they are, what are the height
of those subtrees.
-We go from node 5 -> 7 and ask if we're balanced.
L>7 is a leaf => we return true, O+1 height 
*-If there's no left and right subtree we return 1 for height. This is the base
case of our recursion.
-From node 5 we see that the difference between the height of the left and right
subtree is 0 so it is balanced.
-From 5, we return true and return the height which will be the max height of its
left and right sub-branch, 1, plus 1 for the edge it traverses.

-We are now back at node 2. We check the absolute difference of its sub-heights,
which will be 1.
L>Therefore, it is balanced.
-We return true to the node 1.
-We also take the max between the heights of its subtrees to deterine which 
height to return + 1
-Here, we see that the max height is 2, so we return 2 + 1 as the height back
to node 1.

-We now know that the height of 1's left subtree is 3.
-We go to the right. We're at 3
-To check if it is balanced we look at the height of its left and right subtrees.
-Its left has a height of 0 and its right has a height of 1.
-3 returns true and returns a height of 1 + 1 = 2.
-We're at 1. We look at the heights of the left and right subtree to determine if 
it is balanced.
3-2 = 1 => tree is balanced => return true. 

If however there is one subtree in our tree that is not balanced, we return false
all the way up the tree.

Complexity Analysis
-------------------
O(n) time
O(h) space : h = height of tree

-It will take O(n) time because we're going to have to look at every node in the 
binary tree.
=>there are going to be n recursive calls
-h stands for the number of recursive calls we're going to have in our recursive
stack or memory stack.
-A stack keeps track of all the recursive calls that you've made, that have not 
yet finished executing.
You are going to be reaching bases cases at most h times
-As soon as you have h elements on your stack, you immediately remove one of these 
elements.
-The height of your tree will determine the most amount of recursive calls you will
have on your stack.

