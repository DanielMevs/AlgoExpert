# -*- coding: utf-8 -*-
"""
Created on Sat May 29 17:11 2021

@author: daniel
"""

Zigzag Traverse
-----------------
-Write a function that takes in an nxm two-dimensional array (that can be square-shaped
when n == m) and returns a one-dimensional array of all the array's elements in zig-zag
order.
-Zigzag order starts at the top left corner of the two-dimensional array, goes down by one
element, and proceeds in zigzag pattern all the way to the bottom right corner.

Sample Input
array = [
	[1, 3, 4, 10],
	[2, 5, 9, 11],
	[6, 8, 12, 15],
	[7, 13, 14, 16],

]

Sample Output
[1, 2, 3, 4, 5, 6, 7, 8 ,9, 10, 11, 12, 13, 14, 15, 16]

see zigZag.jpeg 

-In zigzag traversal, you're either going down or you're going up.
-The first leg of the traversal you always go down (to 2)
-Then you go back down through five to six, and even to 7
-Then you go back up.
-Then you go down, down, back sort of up, up
-When we're at column zero, if our direction signaled in our code
says we're going down, we're going to keep going down w/out changing
out column, and update our row to go 1 down.
-If we're ever in the last row and we're still going down, then we should
go right.
-If we're going diagonally upwards and we reach the first row, we just go
to the right.
-Start going down
-We update direction, move up to the right and up.
-When we make a weird direction (i.e. we are at the outter perimeter) we change
directions.
-If we are at the first row, last column, we can't go to the right, so we go down.

Time: O(n) -> total # in 2-D array
L>at the end off the day, it's just a messed-up loop
Space: O(n)
L>we have to store all the elements in an array.
-Traversing the 2-D array itself doesn't take any auxiliary space. 

